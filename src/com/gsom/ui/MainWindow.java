/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gsom.ui;

import com.gsom.core.GSOMRun;
import com.gsom.core.IdentifyBestHitNodes;
import com.gsom.enums.GSOMMessages;
import com.gsom.enums.InitType;
import com.gsom.enums.InputDataType;
import com.gsom.enums.MapPlotType;
import com.gsom.listeners.GSOMRunListener;
import com.gsom.nodes.EucDistOccMat;
import com.gsom.objects.GCluster;
import com.gsom.objects.GNode;
import com.gsom.util.FileWriter;
import com.gsom.util.GFileHandler;
import com.gsom.util.GSOMConstants;
import com.gsom.util.Utils;
import com.sun.image.codec.jpeg.JPEGCodec;
import com.sun.image.codec.jpeg.JPEGEncodeParam;
import com.sun.image.codec.jpeg.JPEGImageEncoder;
import com.xeiam.xchart.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.*;
import java.util.Map.Entry;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.util.ShapeUtilities;

/**
 *
 * @author Thush
 */
public class MainWindow extends javax.swing.JFrame implements GSOMRunListener {

    public static int distance;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        setLocationRelativeTo(null);
        for (InputDataType i : InputDataType.values()) {
            fileTypeCombo.addItem(i.toString());
        }
        fileTypeCombo.setSelectedItem(0);
    }

    private ArrayList<Color> getColorArray(int count) {
        ArrayList<Color> plotColors = new ArrayList<Color>();

        plotColors.add(new Color(0, 0, 0));

        int[] rgb = new int[3];
        for (int j = 0; j < 3; j++) {
            rgb[j] = 0;
        }
        //int incrementVal = 40;
        for (int i = 0; i < 3; i++) {

            rgb[i] = 255;
            plotColors.add(new Color(rgb[0], rgb[1], rgb[2]));
            if (plotColors.size() == count) {
                return plotColors;
            }
            rgb[i] = 0;
        }

        for (int j = 0; j < 3; j++) {
            rgb[j] = 0;
        }

        for (int i = 0; i < 3; i++) {

            rgb[i] = 255;

            for (int j = 0; j < 3; j++) {
                rgb[j] = 255;
                if (i != j) {
                    plotColors.add(new Color(rgb[0], rgb[1], rgb[2]));
                }
                rgb[j] = 0;
                if (plotColors.size() == count) {
                    return plotColors;
                }
            }
            rgb[i] = 0;
        }


        return plotColors;
    }

    public static void saveToFile(JFreeChart chart,
            String aFileName,
            int width,
            int height,
            double quality)
            throws FileNotFoundException, IOException {
        BufferedImage img = draw(chart, width, height);

        FileOutputStream fos = new FileOutputStream(aFileName);
        JPEGImageEncoder encoder2 =
                JPEGCodec.createJPEGEncoder(fos);
        JPEGEncodeParam param2 =
                encoder2.getDefaultJPEGEncodeParam(img);
        param2.setQuality((float) quality, true);
        encoder2.encode(img, param2);
        fos.close();
    }

    protected static BufferedImage draw(JFreeChart chart, int width, int height) {
        BufferedImage img =
                new BufferedImage(width, height,
                BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = img.createGraphics();

        chart.draw(g2, new Rectangle2D.Double(0, 0, width, height));

        g2.dispose();
        return img;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        statusTextArea = new javax.swing.JTextArea();
        InputFileLocationTextBox = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        initTypeCombo = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        trainButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jDistance = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        fileTypeCombo = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        saveData = new javax.swing.JButton();
        maxCountLbl = new javax.swing.JLabel();
        nodeWeightsBtn = new javax.swing.JButton();
        bestHitBtn = new javax.swing.JButton();
        xchartBtn = new javax.swing.JButton();
        heatMapBtn = new javax.swing.JButton();
        cCountTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        pWeightTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        distanceTxt = new javax.swing.JTextField();
        clusterBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GSOM Train & Test Tool");
        setResizable(false);

        statusTextArea.setColumns(20);
        statusTextArea.setRows(5);
        jScrollPane1.setViewportView(statusTextArea);

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Input File Location");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Basic Parameters"));

        jLabel1.setText("SF");

        jLabel2.setText("NR");

        jLabel4.setText("LR");

        jLabel5.setText("ITR");

        initTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Random", "Linear" }));

        jLabel9.setText("Initialization");

        jTextField1.setText("0.3");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setText("4");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField4.setText("0.3");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jTextField5.setText("100");
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        trainButton.setText("Train GSOM");
        trainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(initTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(trainButton)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(initTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(trainButton)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Advance Parameters"));

        jLabel8.setText("Distance");

        jDistance.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Euclidean", "Chi-Square", "Cosine" }));

        jLabel7.setText("Parser");

        fileTypeCombo.setModel(new javax.swing.DefaultComboBoxModel());
        fileTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileTypeComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Cluster Options"));

        saveData.setText("Save Node & Cluster Data");
        saveData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDataActionPerformed(evt);
            }
        });

        maxCountLbl.setText("/ N");

        nodeWeightsBtn.setText("Save Node Weights");
        nodeWeightsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodeWeightsBtnActionPerformed(evt);
            }
        });

        bestHitBtn.setText("Best Hit Nodes");
        bestHitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bestHitBtnActionPerformed(evt);
            }
        });

        xchartBtn.setText("Show Clusters");
        xchartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xchartBtnActionPerformed(evt);
            }
        });

        heatMapBtn.setText("Heat Map");
        heatMapBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heatMapBtnActionPerformed(evt);
            }
        });

        cCountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel12.setText("Cluster Number: ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(nodeWeightsBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveData))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cCountTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(heatMapBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(5, 5, 5)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(maxCountLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(xchartBtn)
                                .addGap(26, 26, 26))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(bestHitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(16, 16, 16))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(maxCountLbl)
                    .addComponent(cCountTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xchartBtn))
                .addGap(35, 35, 35)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bestHitBtn)
                    .addComponent(heatMapBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveData)
                    .addComponent(nodeWeightsBtn))
                .addContainerGap())
        );

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Cluster"));

        jLabel10.setText("Proximity Weight");

        pWeightTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pWeightTxt.setText("0.05");

        jLabel11.setText("Distance Threshold");

        distanceTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        distanceTxt.setText("0");

        clusterBtn.setText("Cluster SOM");
        clusterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clusterBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pWeightTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(distanceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(clusterBtn)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(distanceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pWeightTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clusterBtn))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(InputFileLocationTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(InputFileLocationTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(browseButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel3.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void populateClusterDataList(Map<String, String> testResultMap, ArrayList<GCluster> clusterList, ArrayList<String> clusterDataList) {
        int i = 1;

        for (GCluster cluster : clusterList) {

            ArrayList<GNode> cNodeList = cluster.getcNodes();
            /*
             * Collections.sort(cNodeList,new Comparator<GNode>(){ @Override
             * public int compare(GNode o1, GNode o2) { return
             * o1.getHitValue()-o2.getHitValue(); }
            });
             */
            String clusterDataStr = cluster.getX() + ","
                    + cluster.getY() + ":";

            for (int j = 0; j < cNodeList.size(); j++) {
                GNode node = cNodeList.get(j);
                if (testResultMap.containsKey(Utils.generateIndexString(node.getX(), node.getY()))) {
                    //last item, no comma needed
                    if (j == cluster.getcNodes().size() - 1) {
                        clusterDataStr += testResultMap.get(Utils.generateIndexString(node.getX(), node.getY()));
                    } else {
                        clusterDataStr += testResultMap.get(Utils.generateIndexString(node.getX(), node.getY())) + ",";
                    }
                }

            }
            clusterDataStr += "\n\n";
            clusterDataList.add(clusterDataStr);
            i++;
        }
    }

    private void populateNodeDataList(Map<String, String> testResultMap, ArrayList<String> nodeDataList) {
        for (Map.Entry<String, String> entry : testResultMap.entrySet()) {
            nodeDataList.add(entry.getKey() + ":" + entry.getValue());
        }

    }

    private void trainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainButtonActionPerformed

        GSOMConstants.SPREAD_FACTOR = Double.parseDouble(jTextField1.getText());
        GSOMConstants.MAX_NEIGHBORHOOD_RADIUS = Double.parseDouble(jTextField2.getText());
        GSOMConstants.START_LEARNING_RATE = Double.parseDouble(jTextField4.getText());
        GSOMConstants.MAX_ITERATIONS = Integer.parseInt(jTextField5.getText());

        if (jDistance.getSelectedIndex() == 0) {
            distance = 0;
        } else if (jDistance.getSelectedIndex() == 1) {
            distance = 1;
        } else {
            distance = 2;
        }

        InitType initType = null;
        if (initTypeCombo.getSelectedIndex() == 0) {
            initType = InitType.RANDOM;
        } else if (initTypeCombo.getSelectedIndex() == 1) {
            initType = InitType.LINEAR;
        }
        gRun = new GSOMRun(initType, this);

        InputDataType type = InputDataType.NUMERICAL;

        String typeStr = (String) fileTypeCombo.getSelectedItem();
        if (typeStr.equalsIgnoreCase("NUMERICAL")) {
            type = InputDataType.NUMERICAL;
        } else if (typeStr.equalsIgnoreCase("FLAGS")) {
            type = InputDataType.FLAGS;
        } else if (typeStr.equalsIgnoreCase("ASHES")) {
            type = InputDataType.ASHES;
        }

        gRun.runTraining(InputFileLocationTextBox.getText(), type);


    }//GEN-LAST:event_trainButtonActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JFileChooser chooser = new JFileChooser(".");//E:\GSOM2_v3\GSOM2

        int choice = chooser.showOpenDialog(null);

        if (choice != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File chosenFile = chooser.getSelectedFile();
        //JOptionPane.showMessageDialog(null,chosenFile.getAbsolutePath());
        InputFileLocationTextBox.setText(chosenFile.getAbsolutePath());

    }//GEN-LAST:event_browseButtonActionPerformed

    private void fileTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileTypeComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileTypeComboActionPerformed


    private void saveDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDataActionPerformed
        Map<String, String> testResultMap = gRun.getTestResultMap();

        nodeDataList = new ArrayList<String>();
        populateNodeDataList(testResultMap, nodeDataList);

        clusterDataList = new ArrayList<String>();
        ArrayList<ArrayList<GCluster>> clusterList = gRun.getAllClusters();
        int cCount = Integer.parseInt(pWeightTxt.getText());
        int cListIdx = cCount - 2;
        if (cListIdx > clusterList.size() - 1) {
            JOptionPane.showMessageDialog(null, "Enter a number less than " + (clusterList.size() + 2));
        } else {
            populateClusterDataList(testResultMap, clusterList.get(cListIdx), clusterDataList);
            GFileHandler.writeFile("ClusterData.txt", clusterDataList);
            GFileHandler.writeFile("NodeData.txt", nodeDataList);
        }
    }//GEN-LAST:event_saveDataActionPerformed

    private void xchartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xchartBtnActionPerformed
        int cCount = Integer.parseInt(cCountTxt.getText()) - 2;
        MapVisualization visFrame = new MapVisualization();
        visFrame.setData(gRun.getGSOMMap(), gRun.getTestResultMap(), gRun.getAllClusters().get(cCount), null, MapPlotType.CLUSTERS);
        visFrame.setVisible(true);
        //displayGSOM(gRun.getGSOMMap(), gRun.getTestResultMap(), gRun.getAllClusters().get(cCount));
    }//GEN-LAST:event_xchartBtnActionPerformed

    
    
    

    private void nodeWeightsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodeWeightsBtnActionPerformed
        FileWriter fw = new FileWriter();
        fw.initialize("Node Weights.txt");
        fw.writeData(gRun.getNodeWeights());
        fw.close();
    }//GEN-LAST:event_nodeWeightsBtnActionPerformed

    private void bestHitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bestHitBtnActionPerformed
        IdentifyBestHitNodes obj = new IdentifyBestHitNodes();
        ArrayList<String> bestHits = obj.getHitNodeIDs(gRun.getGSOMMap(), 1, GSOMConstants.MAX_NEIGHBORHOOD_RADIUS);
        MapVisualization visFrame = new MapVisualization();
        visFrame.setData(gRun.getGSOMMap(), gRun.getTestResultMap(),null, bestHits,MapPlotType.BEST_HIT);
        visFrame.setVisible(true);
    }//GEN-LAST:event_bestHitBtnActionPerformed

    private void clusterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clusterBtnActionPerformed
        int distance = Integer.parseInt(distanceTxt.getText());
        double pWeight = Double.parseDouble(pWeightTxt.getText());
        gRun.runClustering(distance,pWeight);
    }//GEN-LAST:event_clusterBtnActionPerformed

    private void heatMapBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heatMapBtnActionPerformed
        MapVisualization visFrame = new MapVisualization();
        visFrame.setData(gRun.getGSOMMap(), gRun.getTestResultMap(), null, null,MapPlotType.HEAT_MAP);
        visFrame.setVisible(true);
    }//GEN-LAST:event_heatMapBtnActionPerformed

    private void getClusterInfo(){
        
    }

    private String getFolderPath(String path) {
        if (path == null || path.length() <= 0) {
            return "";
        }

        String[] tokens = path.split("\\\\");
        String dirLoc = "";
        for (int i = 0; tokens.length > 0 && i < tokens.length - 1; i++) {
            dirLoc += tokens[i] + "\\\\";
        }
        return dirLoc;
    }
    private GSOMRun gRun;
    private ArrayList<String> nodeDataList;
    private ArrayList<String> clusterDataList;


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainWindow().setVisible(true);

            }
        });
    }

    private void createTheXYPlot(Map<String, GNode> map, final Map<String, String> testResults, ArrayList<GCluster> clusters) {
        ArrayList<Color> plotColors = getColorArray(12);

        XYToolTipGenerator tipGen = new XYToolTipGenerator() {

            @Override
            public String generateToolTip(XYDataset xyd, int i1, int i2) {
                int dX = (int) xyd.getXValue(i1, i2);
                int dY = (int) xyd.getYValue(i1, i2);
                String str = testResults.get(Utils.generateIndexString(dX, dY));
                //if(str==null){
                //String str = "Dummy Node";
                //}
                return str;
            }
        };

        XYLineAndShapeRenderer nonHitRend = new XYLineAndShapeRenderer();
        nonHitRend.setSeriesPaint(0, new Color(0, 0, 0));
        nonHitRend.setBaseLinesVisible(false);

        ArrayList<XYSeries> seriesSet = new ArrayList<XYSeries>();


        // identify non-hit nodes first 
        XYSeries nonHitSeries = new XYSeries("Non-hit nodes");
        for (GNode node : map.values()) {
            if (!testResults.containsKey(Utils.generateIndexString(node.getX(), node.getY()))) {
                nonHitSeries.add(node.getX(), node.getY());
            }
        }
        seriesSet.add(nonHitSeries);


        int idx = 0;
        for (GCluster cluster : clusters) {
            XYSeries temp = new XYSeries("cluster" + idx);
            for (GNode node : cluster.getcNodes()) {
                if (testResults.containsKey(Utils.generateIndexString(node.getX(), node.getY()))) {
                    temp.add(node.getX(), node.getY());
                }
            }
            seriesSet.add(temp);
            idx++;
        }

        ArrayList<XYDataset> dataset = new ArrayList<XYDataset>();
        for (XYSeries series : seriesSet) {
            dataset.add(new XYSeriesCollection(series));
        }

        //XYDataset nonHitDataset = new XYSeriesCollection(nonHitSeries);

        JFreeChart chart = ChartFactory.createScatterPlot("GSOM Network", "X", "Y", null, PlotOrientation.VERTICAL, false, true, false);

        XYPlot plot = (XYPlot) chart.getPlot();

        for (int j = 0; j < dataset.size(); j++) {
            XYLineAndShapeRenderer rend = new XYLineAndShapeRenderer();
            rend.setBaseToolTipGenerator(tipGen);
            rend.setBaseLinesVisible(false);
            if (j == 0) {
                rend.setSeriesPaint(0, plotColors.get(j));
            } else {
                rend.setSeriesPaint(j, plotColors.get(2));
            }
            //rend.setSeriesPaint(1, plotColors.get(j));            
            rend.setSeriesShape(0, ShapeUtilities.createDiagonalCross(3, .3f));
            plot.setDataset(j, dataset.get(j));
            plot.setRenderer(j, rend);


        }


//        ChartPanel chartpanel = new ChartPanel(chart, false, false, false, false, false);
//        chartpanel.addMouseListener(chartpanel);
        //plot.setDataset(1,nonHitDataset);
        //plot.setRenderer(1,nonHitRend);

        ChartFrame cFrame = new ChartFrame("GSOM Network", chart);
        cFrame.setSize(450, 500);
        cFrame.setVisible(true);

        try {
            saveToFile(chart, "test.jpg", 450, 500, 100);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void createTheXYPlotHitAndNonHit(Map<String, GNode> map, final Map<String, String> testResults) {

        XYToolTipGenerator tipGen = new XYToolTipGenerator() {

            @Override
            public String generateToolTip(XYDataset xyd, int i1, int i2) {
                int dX = (int) xyd.getXValue(i1, i2);
                int dY = (int) xyd.getYValue(i1, i2);
                String str = testResults.get(Utils.generateIndexString(dX, dY));

                return str;
            }
        };

        XYLineAndShapeRenderer rend = new XYLineAndShapeRenderer();
        rend.setSeriesPaint(0, Color.black);
        rend.setSeriesPaint(1, Color.red);
        rend.setBaseLinesVisible(false);

        XYSeries hitSeries = new XYSeries("Hit nodes");
        XYSeries nonHitSeries = new XYSeries("Non-hit nodes");

        // identify non-hit nodes first
        for (GNode node : map.values()) {
            if (!testResults.containsKey(Utils.generateIndexString(node.getX(), node.getY()))) {
                nonHitSeries.add(node.getX(), node.getY());
            } else {
                hitSeries.add(node.getX(), node.getY());
            }
        }

        XYDataset hDataset = new XYSeriesCollection(hitSeries);
        XYDataset nhDataset = new XYSeriesCollection(nonHitSeries);

        JFreeChart chart = ChartFactory.createScatterPlot("GSOM Network", "X", "Y", null, PlotOrientation.HORIZONTAL, false, true, false);

        XYPlot plot = (XYPlot) chart.getPlot();

        rend.setSeriesShape(0, ShapeUtilities.createDiagonalCross(3, .3f));
        plot.setDataset(0, hDataset);
        plot.setDataset(1, nhDataset);
        plot.setRenderer(0, rend);
        plot.setRenderer(1, rend);

        ChartFrame cFrame = new ChartFrame("GSOM Network", chart);
        cFrame.setSize(450, 500);
        cFrame.setVisible(true);


        try {
            saveToFile(chart, "e:/test1.jpg", 450, 500, 100);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField InputFileLocationTextBox;
    private javax.swing.JButton bestHitBtn;
    private javax.swing.JButton browseButton;
    private javax.swing.JTextField cCountTxt;
    private javax.swing.JButton clusterBtn;
    private javax.swing.JTextField distanceTxt;
    private javax.swing.JComboBox fileTypeCombo;
    private javax.swing.JButton heatMapBtn;
    private javax.swing.JComboBox initTypeCombo;
    private javax.swing.JComboBox jDistance;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JLabel maxCountLbl;
    private javax.swing.JButton nodeWeightsBtn;
    private javax.swing.JTextField pWeightTxt;
    private javax.swing.JButton saveData;
    private javax.swing.JTextArea statusTextArea;
    private javax.swing.JButton trainButton;
    private javax.swing.JButton xchartBtn;
    // End of variables declaration//GEN-END:variables

    @Override
    public void stepCompleted(String str) {
        statusTextArea.append(str + "\n");
        if(str.equals(GSOMMessages.CLUSTERING_COMPLETED)){
            cCountTxt.setText((gRun.getBestCount() + 2) + "");
            maxCountLbl.setText(gRun.getAllClusters().size() + 1 + "");
        }
    }
}
